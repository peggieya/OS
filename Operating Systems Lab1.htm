<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- saved from url=(0057)http://individual.utoronto.ca/davidlion/ece344/asst1.html -->
<html class="gr__individual_utoronto_ca"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>
Operating Systems, ECE344, Fall 2017
</title>
  <link title="compact" rel="stylesheet" type="text/css" href="./Operating Systems Lab1_files/default.css">
  <link title="compact" rel="stylesheet" type="text/css" href="./Operating Systems Lab1_files/local.css">
</head>

<body data-gr-c-s-loaded="true">
<table class="maintable">
<tbody><tr>

<td class="left">
<a href="http://individual.utoronto.ca/davidlion/ece344/index.html">Home</a><br>
<a href="http://individual.utoronto.ca/davidlion/ece344/lab-documentation.html">Lab Documentation</a><br>
<a href="http://individual.utoronto.ca/davidlion/ece344/lab-assignments.html">Lab Assignments</a><br>
</td>

<td class="right">
<div class="centeralign">
<h1>Operating Systems</h1>
<h2 class="noborder">ECE344, Fall 2017<br>
University of Toronto</h2>
<br>
</div>

<div class="main">

<h2>Assignment 1: Synchronization</h2>
                                
<p>
<b>Release date</b>: Sept. 27<br>
<b>Due date</b>: Oct. 13 (Friday), 5:59pm<br>
<!-- <b>TA responsible for this Lab</b>: Jack Sun (kuei dot sun at mail dot utoronto dot ca). -->
</p>

<h3>Objectives</h3>

<p>After this assignment, you should:</p>

<ul>
<li>Understand how OS161 implements semaphores.</li>
<li>Be comfortable developing/implementing synchronization primitives.</li>
<li>Be able to select an appropriate synchronization primitive for a given problem.</li>
<li>Be able to properly synchronize different types of problems.</li>
</ul>

<h3>Introduction</h3>

<p>In this assignment, you will implement synchronization primitives for OS161
and learn how to use them to solve several synchronization problems. Once you
have completed the written and programming exercises you should have a fairly
solid grasp of the pitfalls of concurrent programming and, more importantly, how
to avoid those pitfalls in the code you will write later this term.</p>

<p>To complete this assignment you will need to be familiar with the OS161
threading code. The thread system provides interrupts, control functions, and
semaphores. You will implement locks and condition variables.</p>

<h4>Write readable code!</h4>

<p>In your programming assignments, you are expected to write well-documented,
readable code. There are a variety of reasons to strive for clear and readable
code. Since you will be working in pairs, it will be important for you to be
able to read your partner's code. Also, since you will be working on OS161 for
the entire term, you may need to read and understand code that you wrote several
months earlier.</p>

<p>There is no single right way to organize and document your code. It is not
our intent to dictate a particular coding style for this class. The best way to
learn about writing readable code is to read other people's code. Read the OS161
code, read your partner's code, read the source code of some freely available
operating system. When you read someone else's code, note what you like and what
you don't like. Pay close attention to the lines of comments which most clearly
and efficiently explain what is going on. When you write code yourself, keep
these observations in mind.</p>

<p>Here are some general tips for writing better code:</p>

<ul>
<li>Group related items together, whether they are variable declarations, lines
of code, or functions.</li>
<li>Use descriptive names for variables and procedures. Be consistent with this
throughout the program.</li>
<li>Comments should describe the programmer's intent, not the actual mechanics
of the code. A comment which says "Find a free disk block" is much more
informative than one that says "Find first non-zero element of array."</li>
</ul>

<p>You and your partner will probably find it useful to agree on a coding style
-- for instance, you might want to agree on how variables and functions will be
named (my_function, myFunction, MyFunction, etc.), since your code will have to
interoperate.</p>

<h3>Begin your assignment</h3>

<p>The very first thing you need to make sure is that you do not have any
outstanding updates in your Subversion tree. Use <tt>svn update</tt> and <tt>svn
commit</tt> to get your tree committed. Make sure that you do
not <a href="http://individual.utoronto.ca/davidlion/ece344/svn.html#svn-ignore">commit generated files</a>.</p>

<p>Now, "tag" your Subversion repository. The purpose of tagging your repository
is to make sure that you have something against which to compare your final
tree. Again, make sure that you do not have any outstanding updates in your tree
(such as the new files).</p>

<p>Now, tag your repository exactly as shown below.</p>

<pre>  % svn copy -m "starting assignment 1" $ECE344_SVN/trunk $ECE344_SVN/tags/asst1-start
</pre>

<h4><a name="configure"></a>Configure OS161 for ASST1</h4>

<p>We have provided you with a framework to run your solutions for ASST1. This
framework consists of driver code (found in <tt>kern/asst1</tt>) and menu items
you can use to execute your solutions from the OS161 kernel boot menu.</p>

<p>You have to reconfigure your kernel before you can use this framework. The
procedure for configuring a kernel is the same as in ASST0, except you will use
the ASST1 configuration file:</p>

<pre>  % cd ~/ece344/os161
  % cd kern/conf
  % ./config ASST1
</pre>

<p>You should now see an ASST1 directory in the <tt>compile</tt> directory.</p>

<h4>Building for ASST1</h4>

<p>When you built OS161 for ASST0, you ran <tt>make</tt>
from <tt>compile/ASST0</tt>. In ASST1, you run <tt>make</tt> from (you guessed
it) <tt>compile/ASST1</tt>.</p>

<pre>  % cd ~/ece344/os161/kern
  % cd compile/ASST1
  % make depend
  % make
  % make install
</pre>

<p>If you are told that the <tt>compile/ASST1</tt> directory does not exist,
make sure you ran config for ASST1.</p>

<h4><a name="commandline"></a>Command line arguments to OS161</h4>

<p>In order to execute the tests in this assignment, you will need more than the
512 KB of memory configured into System/161 by default. We suggest that you
allocate at least 2MB of RAM to System/161. This configuration option is passed
to the <tt>busctl</tt> device with the <tt>ramsize</tt> parameter in
your <tt>sys161.conf</tt> file. Make sure the <tt>busctl</tt> device line looks
like the following:</p>

<pre>  31 busctl ramsize=2097152
</pre>

<h3>Concurrent programming with OS161</h3>

<p>If your code is properly synchronized, the timing of context switches and the
order in which threads run should not change the behavior of your solution. Of
course, your threads may print messages in different orders, but you should be
able to easily verify that they follow all of the constraints applied to them
and that they do not deadlock.</p>

<h4>Built-in thread tests</h4>

<p>When you booted OS161 in ASST0, you may have seen the options to run the
thread tests. The thread test code uses the semaphore synchronization
primitive. You should trace the execution of one of these thread tests in GDB to
see how the scheduler acts, how threads are created, and what exactly happens in
a context switch.  You should be able to step through a call to
<tt>mi_switch()</tt> and see exactly where the current thread changes.</p>

<p>Thread test 1 ( "tt1" at the prompt or <tt>tt1</tt> on the kernel command 
line) prints the numbers 0 through 7 each time each thread loops.  
Thread test 2 ("tt2") prints only when each thread starts and exits.  
The latter is intended to show that the scheduler doesn't cause 
starvation -- the threads should all start together, spin for awhile, 
and then end together.</p>

<h4>Debugging concurrent programs</h4>

<p><tt>thread_yield()</tt> is automatically called for you at intervals that 
vary randomly. While this randomness is fairly close to reality, it 
complicates the process of debugging your concurrent programs.</p>

<p>The random number generator used to vary the time between these 
<tt>thread_yield()</tt> calls uses the same seed as the random device in
System/161. This means that you can reproduce a specific execution sequence by
using a fixed seed for the random number generator. You can pass an explicit
seed into random device by editing the "random" line in
your <tt>sys161.conf</tt> file. For example, to set the seed to 1 , you would
edit the line to look like:</p>

<pre>  28 random seed=1
</pre>

<p>We recommend that while you are writing and debugging your solutions you pick
a seed and use it consistently. Once you are confident that your threads do what
they are supposed to do, set the random device to <tt>autoseed</tt>. This should
allow you to test your solutions under varying conditions and may expose
scenarios that you had not anticipated.</p>

<!--
<p>(Note that for assignments 3 and 4, the disk device has a random delay that
means that even if you use the same seed, you may not get reproducible
results.)</p>
-->

<h3>Code reading</h3>

<p>To implement synchronization primitives, you will have to understand the
operation of the threading system in OS161. It may also help you to look at the
provided implementation of semaphores. When you are writing solution code for
the synchronization problems it will help if you also understand exactly what
the OS161 scheduler does when it dispatches among threads.</p>

<h4>Thread questions</h4>

<ol>
<li>What happens to a thread when it exits (i.e.,
  calls <tt>thread_exit()</tt>)?  What about when it sleeps?</li>
<li>What function(s) handle(s) a context switch?</li>
<li>What does it mean for a thread to be in each of the possible thread
  states?</li>
<li> What does it mean to turn interrupts off? How is this accomplished? Why is
  it important to turn off interrupts in the thread subsystem code?</li>
<li> What happens when a thread wakes up another thread?  How does a sleeping
  thread get to run again?</li>
</ol>

<h4>Scheduler questions</h4>

<ol>
<li>What function(s) choose(s) the next thread to run?</li>
<li>How does it (do they) pick the next thread?</li>
<li> What role does the hardware timer play in scheduling? What hardware 
independent function is called on a timer interrupt?</li>
</ol>

<h4>Synchronization questions</h4>

<ol>
<li> Describe how <tt>thread_sleep()</tt> and <tt>thread_wakeup()</tt> are used
to implement semaphores. What is the purpose of the argument passed
  to <tt>thread_sleep()</tt>?</li>
<li> Why does the lock API in OS161 provide <tt>lock_do_i_hold()</tt>, 
but not <tt>lock_get_holder()</tt>?</li>
</ol>

<h3>Identifying synchronization problems</h3>

<p> The following problems are designed to familiarize you with some of the
problems that arise in concurrent programming and help you learn to identify and
solve them.</p>

<h4>Identify deadlocks</h4>

<ol>
<li> Here are code samples for two threads that use binary semaphores.  Give a
sequence of execution and context switches in which these two threads can
deadlock.</li>

<li> Propose a change to one or both of them that makes deadlock
impossible. What general principle do the original threads violate that causes
them to deadlock?

<pre>semaphore *mutex, *data;
void me() {
  P(mutex);
  /* do something */
  P(data);
  /* do something else */

  V(mutex);
  /* clean up */
  V(data);
}

void you() {
  P(data)
  P(mutex);

  /* do something */

  V(data);
  V(mutex);
}
</pre>
</li>
</ol>

<ol>

<li> Here are two more threads. Can they deadlock? If so, give a concurrent
execution in which they do and propose a change to one or both that makes them
deadlock free.
	
<pre>lock *file1, *file2, *mutex;

void laurel() {
  lock_acquire(mutex);

  /* do something */

  lock_acquire(file1);
  /* write to file 1 */
  lock_acquire(file2);
  /* write to file 2 */
  lock_release(file1);
  lock_release(mutex);

  /* do something */

  lock_acquire(file1);
  /* read from file 1 */
  /* write to file 2 */

  lock_release(file2);
  lock_release(file1);
}


void hardy() {
  /* do stuff */

  lock_acquire(file1);
  /* read from file 1 */
  lock_acquire(file2);
  /* write to file 2 */

  lock_release(file1);
  lock_release(file2);
  lock_acquire(mutex);

  /* do something */

  lock_acquire(file1);

  /* write to file 1 */

  lock_release(file1);
  lock_release(mutex);
}
</pre>
</li>
</ol>

<h3>Coding synchronization primitives</h3>

<p>We know: you've been itching to get to the coding.  Well, you've finally
arrived!</p>

<h4>1. Implement locks</h4>

<p>Implement locks for OS161. The interface for the lock structure is defined
in <tt>kern/include/synch.h</tt>. Stub code is provided
in <tt>kern/thread/synch.c</tt>.  You can use the implementation of semaphores
as a model, but <strong> do not</strong> build your lock implementation on top
of semaphores or you will be penalized.</p>

<h4>2. Implement condition variables</h4>

<p>Implement condition variables for OS161. The interface for the <tt>cv</tt>
structure is also defined in <tt>synch.h</tt> and stub code is provided
in <tt>synch.c</tt>. Again, do not build your implementation using
semaphores.</p>


<h3>Solving synchronization problems</h3>

<p>The following problems will give you the opportunity to write some fairly
straightforward concurrent programs and get a more detailed understanding of how
to use threads to solve problems. We have provided you with basic driver code
that starts a predefined number of threads. You are responsible for what those
threads do.</p>

<p>Remember to specify a seed to use in the random number generator by editing
your <tt>sys161.conf</tt> file. It is much easier to debug initial problems when
the sequence of execution and context switches is reproducible.</p>

<p>When you configure your kernel for ASST1, the driver code and extra menu
options for executing your solutions are automatically compiled in.</p>

<h4>Synchronization problem 1: Of Mice and Cats</h4>

<p>One of the esteemed professors in our department has a number of cats and
(unfortunately) a number of mice that inhabit her house.  The cats and mice have
worked out a deal where the mice can steal pieces of the cats' food, so long as
the cats never see the mice actually doing so.  If the cats see the mice, then
the cats must eat the mice (or else lose face to all their cat friends).</p>

<p>There are two catfood dishes, 6 cats (not really, but it makes the problem
more interesting), and two house mice.</p>

<p>Your job is to synchronize the cats and mice.  No mouse should ever get
eaten. You can assume that if a cat is eating at either food dish, any mouse
attempting to eat from the other dish will be seen and eaten.  When cats aren't
eating, they will not see mice eating. Also, you may not starve either the cats
or the mice.  Only one mouse or cat may eat at a given dish at any one time.</p>

<p>Cats and mice must be able to eat from both dishes when possible. For
  example, the synchronization should not force the cats and mice to eat from
  only one dish at a time.</p>

<p>Also, make no assumptions about the time that a cat or mouse may spend
outside the house (i.e., not eating). For example, the cats and mice should not
eat in a round-robin order, or else a single cat who has gone for a walk will
delay all others.</p>

<p>The driver code for the Pet Synchronization problem is found in the driver
files <tt>catsem.c</tt> and <tt>catlock.c</tt>. 
<!---
<b>Please download the following two files:</b> <a href="catlock.c"><tt>catlock.c</tt></a> and <a href="catsem.c"><tt>catsem.c</tt></a> from the class web site. 
Then,
replace the existing files in <tt>kern/asst1</tt> with these files. The new
files update the definition of the <tt>sem_eat()</tt> and <tt>lock_eat()</tt>
functions in the two files.</p>
--->

</p><p>Right now the driver code only forks the required number of cat and mouse
threads.  Your job is to implement a solution using either semaphores or
locks. When a cat or a mouse is eating, you need to call the <tt>sem_eat</tt>
or <tt>lock_eat()</tt> functions that are provided. These functions help each
cat or mouse thread identify itself when it begins and ends eating.  While
eating, the cat or the mouse thread sleep for a second by
calling <tt>clocksleep()</tt>. The parameters of these functions are "cat" or
"mouse", the cat number (0-5) or mouse number (0-1), the bowl number (1 or 2),
and the iteration number (0-3, assume that each cat or mouse will eat four
times).</p>

<p>Here is a sample output:</p>

<pre>cat: 0 starts eating: bowl 1, iteration 0
cat: 0 ends eating: bowl 1, iteration 0
mouse: 0 starts eating: bowl 1, iteration 0
mouse: 1 starts eating: bowl 2, iteration 0
mouse: 0 ends eating: bowl 1, iteration 0
mouse: 1 ends eating: bowl 2, iteration 0
</pre>

<!--
<p>
<strong>You do not need to submit your solution.txt for this lab any more. </strong>
<strike>
When you have completed your solution, explain how your solution avoids
starvation, in a
file <tt>~/ece344/os161/submit/1/solution.txt</tt>. <strong>Only one of the
partners should create this file.</strong> The other can check it out and edit it as
needed.</p>

<pre>
  %  mkdir -p ~/ece344/os161/submit/1
  %  gedit [or your favorite editor] ~/ece344/os161/submit/1/solution.txt
</pre>

</strike>
-->

<h4>Synchronization problem 2: Podunk Traffic Problem</h4>

<p>Traffic through the main intersection in the town of Podunk, KS (feel free to
insert the name of your favorite small town) has increased over the past few
years.  Until now the intersection has been a four-way stop but now the
impending gridlock has forced the residents of Podunk to admit that they need a
more efficient way for traffic to pass through the intersection.  Your job is to
design and implement a solution using any synchronization primitives you have
implemented.
</p>

<p>
<img alt="Podunk Traffic Light" src="./Operating Systems Lab1_files/asst1-fig1.gif">
</p>


<h5>Modelling the intersection</h5>

<p>For the purposes of this problem we will model the intersection as shown
above, dividing it into quarters and identifying each quarter with which lane
enters the intersection through that portion.  (Just to clarify: Podunk is in
the US, so we're driving on the right side of the road.) Turns are represented
by a progression through one, two, or three portions of the intersection (for
simplicity assume that U-turns do not occur in the intersection).  So if a car
approaches from the North, depending on where it is going, it proceeds through
the intersection as follows:</p>

<ul>
<li> Right: NW
</li><li> Straight: NW-SW
</li><li> Left: NW-SW-SE
</li></ul>

<p>Before you begin coding, answer the follow questions:</p>

<ol>

<li>Assume that the residents of Podunk are exceptional and follow the old (and
widely ignored) convention that whoever arrives at the intersection first
proceeds first.  Using the langauge of synchronization primitives describe the
way this intersection is controlled.  In what ways is this method
suboptimal?</li>

<li> Now, assume that the residents of Podunk are like most people and do not
follow the convention described above. In what one instance can this
four-way-stop intersection produce a deadlock? (It will be helpful to think of
this in terms of the model we are using instead of trying to visualize an actual
intersection).</li>
</ol>

<h5>Implementing your solution</h5>

<p> We have given you the model for the intersection.  The following are the
requirements for your solution:</p>

<ul>
<li>No two cars can be in the same portion of the intersection at the same
time.  (In Podunk they call this an accident).</li>

<li>Residents of Podunk do not pass each other going the same way.  If two cars
both approach from the same direction and head in the same direction, the first
car to reach the intersection should be the first to reach the
destination. Similarly, cars shouldn't “jump” over each other in the
intersection. For example, say that a car enters the intersection and is going
straight. Then another car enters the intersection from the same direction and
is going left. The second car should exit the intersection after the first
one. However, suppose that a car enters the intersection and is going left. If
another car enters the intersection from the same direction and is going right,
then it may leave the intersection earlier because the first car, even though it
is ahead of the second car, may not yet be able to make the left turn.
</li>

<li>Each car should print a message as it approaches the intersection
(<tt>approaching</tt>), enters one ore more regions of the intersection
(<tt>region1</tt>, <tt>region2</tt> and <tt>region3</tt>), and leaves the
intersection (<tt>leaving</tt>), indicating the car number, approach direction
and destination direction. You should call the <tt>message</tt> function that is
provided for printing.</li>

<li>
The car number is just an identification number.
Cars can approach the intersection (and print the approaching message) in any order (i.e. car2 approaches, then car1 approaches).
However, cars from the same direction must enter the intersection in the same order that they approached.
This means in the previous example where car2 printed that it approached before before car1, car2 must enter the intersection before car1.
Do not simply print <tt>approaching</tt> just before entering <tt>region1</tt> of the intersection, using the <tt>message</tt> function, e.g., there should be a synchronization primitive between the two events.
</li>

<li>There are no other ordering requirements. For example, there are no ordering
requirements for cars approaching from different directions.</li>

<li>Your solution should allow two or more cars to be in the intersection at a
time, without allowing traffic from any direction to starve traffic from any
other direction.</li>

</ul>

<p>The driver for the Podunk Traffic problem is in <tt>stoplight.c</tt> (a not
so subtle hint about one possible solution).

</p><p>The driver file consists of <tt>createcars()</tt> which creates 20 cars and
passes them to <tt>approachintersection()</tt> which assigns each a random
direction. We forgot to assign them a random turn direction; please do this in
<tt>approachintersection()</tt> as well.</p>

<p>The file <tt>stoplight.c</tt> also includes routines
<tt>gostraight()</tt>, <tt>turnright()</tt> and <tt>turnleft()</tt> 
that may or may not be helpful in implementing your solution.  Use them or 
discard them as you like.</p>

<p>Here is a sample output for one car (car 8) that arrives from the East and is
heading West. Note that the regions (e.g., <tt>region1</tt>) are defined
relative to each car. A car going right will output <tt>region1</tt>. A car
going straight will output <tt>region1</tt> and <tt>region2</tt>. A car going
left will output <tt>region1</tt>, <tt>region2</tt> and <tt>region3</tt>.</p>

<pre>approaching: car =  8, direction = E, destination = W
region1:     car =  8, direction = E, destination = W
region2:     car =  8, direction = E, destination = W
leaving:     car =  8, direction = E, destination = W
</pre>


<!--
<p><strike>When you have completed your solution, explain how your solution meets the
requirements described above, in the <tt>solution.txt</tt> file.</strike></p>
-->

<!--
<h3>Design Document</h3>

<p>You will be submitting a design document for this lab in a file
called <tt>solution.txt</tt></p>

<p>Your document should provide a rationale for the design of your synchronization
algorithms. It should mainly explain the decisions you made to arrive at your
design (the "why" you did it) rather than the details of the implementation (the
"what" or "how" you did it). For example, for the cat/mice problem, it can
explain "why" your design ensures that cats will not kill the mice, or "why"
your algorithm is fair or not, "why" it avoids deadlocks, starvation, does it
use all available bowls when possible, etc.</p>

<p>Your design document should include the following:</p>
<ul>
  <li> A high level description of how you are approaching the problem.</li>
  <li> A description of the implementation (e.g., any new structures, why they
    were created, what they are encapsulating, what problems they solve).</li>
  <li> A discussion of any alternatives to your approach and why you discarded
    them.</li>
</ul>

<p>We are explicitly not specifying page lengths because specifying page lengths
encourages quantity rather than quality of writing, but we are expecting short,
crisp write ups that make it clear that you understand the problem and have
explored the design space of the solution.</p>
-->

<h3><a name="submission"></a>Preparing your assignment for submission</h3>

<p>Finally, you need to prepare your code for submitting your assignment.</p>

<ol>
<!---
<li>
<strong>Ignore this step. Goto step 2.</strong>

<strike>
Make sure that you have updated your design document,
called <tt>solution.txt</tt>, based on your final solution. This file must be a
text file, not a word document, not a pdf document, etc. This file should be in
the <tt>~/ece344/os161/submit/1</tt> directory.</li>
</strike>
--->
<li>Once you are confident that you have completely done your assignment,
run <tt>make clean</tt> from the <tt>os161</tt> directory. This will clean all
generated files. Then use <tt>svn status</tt> in the <tt>os161</tt> directory to
find out the status of all files. Any files that have a <tt>?</tt> before them
are not in the repository. If you have created these files by hand,
<!-- (including the <tt>solution.txt</tt> file), --> 
then add them to the repository
using <a href="http://individual.utoronto.ca/davidlion/ece344/svn.html#add">svn add</a>. If these are generated files, use the
instructions <a href="http://individual.utoronto.ca/davidlion/ece344/svn.html#svn-ignore">here to ignore these files</a>.</li>

<li>Then run <tt>svn commit</tt> from the <tt>os161</tt> directory so that all
modified files are checked in your repository. Use <tt>svn status</tt> in
the <tt>os161</tt> directory again to make sure that all your modified source
files are properly committed. Make sure that your partner's changes are also
committed.</li>

<!--
<li>Create a patch file that describes the changes you have made in this
assignment (<strong>you do not need to submit the patch file</strong>):

<pre>
  % cd ~/ece344
  % svn diff $ECE344_SVN/tags/asst1-start $ECE344_SVN/trunk > asst1.patch
</pre>

Look at the patch file to make sure that it contains the changes you expect and
no other changes. For example, the following <tt>grep</tt> command will show you
the files that have been modified in the patch. If you see generated files
(e.g., object files or executable files) or sources files that you think that
you have not modified, then you need to make sure that your svn start tag is
correct and that you have only committed the relevant files.

<pre>
  %  grep "^Index: " asst1.patch
</pre>

</li>
-->
<li>Tag your repository for the end of asst1.  We will be using the start and
the end tags to checkout your code for marking:

<pre>  % svn copy -m "ending assignment 1" $ECE344_SVN/trunk $ECE344_SVN/tags/asst1-end
</pre>

</li>

</ol>

<h3>Testing your assignment with os161-tester</h3>

<p>Please read the <a href="http://individual.utoronto.ca/davidlion/ece344/testing.html">instructions for testing your code</a>.
</p>

</div>
</td>
</tr>
</tbody></table>


</body></html>